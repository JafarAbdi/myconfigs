{
  "#if": {
    "body": [
      "#if ${1:0}",
      "$0",
      "#endif // $1"
    ],
    "description": "Code snippet for #if",
    "prefix": "#if"
  },
  "#ifdef": {
    "body": [
      "#ifdef ${1:DEBUG}",
      "$0",
      "#endif // ${DEBUG}"
    ],
    "description": "Code snippet for #ifdef",
    "prefix": "#ifdef"
  },
  "#ifndef": {
    "body": [
      "#ifndef ${1:DEBUG}",
      "$0",
      "#endif // !$1"
    ],
    "description": "Code snippet for #ifndef",
    "prefix": "#ifndef"
  },
  "Main function template": {
    "body": [
      "int main (int argc, char *argv[])",
      "{",
      "\t$1",
      "\treturn 0;",
      "}"
    ],
    "description": "A standard main function for a C++ program",
    "prefix": "main"
  },
  "class": {
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1();",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1();",
      "",
      "private:",
      "\t$2",
      "};",
      "",
      "$1::$1()",
      "{",
      "}",
      "",
      "$1::~$1()",
      "{",
      "}"
    ],
    "description": "Code snippet for class",
    "prefix": "class"
  },
  "classi": {
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1() = default;",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1() = default;",
      "",
      "private:",
      "\t$2",
      "};"
    ],
    "description": "Code snippet for class with inline constructor/destructor",
    "prefix": "classi"
  },
  "dependent_false": {
    "body": [
      "template <typename... Args>",
      "inline constexpr bool dependent_false = false;"
    ],
    "description": "Dependent false",
    "prefix": "dependent_false"
  },
  "do": {
    "body": [
      "do",
      "{",
      "\t$1",
      "} while($2);"
    ],
    "description": "Code snippet for do...while loop",
    "prefix": "do"
  },
  "else": {
    "body": [
      "else",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for else statement",
    "prefix": "else"
  },
  "else if": {
    "body": [
      "else if ($1)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for else-if statement",
    "prefix": "else if"
  },
  "enable_if": {
    "body": [
      "std::enable_if_t<$1, void*> = nullptr"
    ],
    "description": "Enable if https://youtu.be/ImLFlLjSveM?t=2161",
    "prefix": "enable_if"
  },
  "enum": {
    "body": [
      "enum ${1:MyEnum} {",
      "\t$0",
      "};"
    ],
    "description": "Code snippet for enum",
    "prefix": "enum"
  },
  "enum class": {
    "body": [
      "enum class ${1:MyClass} {$0};"
    ],
    "description": "Code snippet for enum class (c++11)",
    "prefix": "enum class"
  },
  "for": {
    "body": [
      "for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for 'for' loop",
    "prefix": "for"
  },
  "foreach": {
    "body": [
      "for(${1:auto} ${2:var} : ${3:collection_to_loop})",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for range-based for loop (c++11) statement",
    "prefix": "foreach"
  },
  "forr": {
    "body": [
      "for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop",
    "prefix": "for"
  },
  "fprintf": {
    "body": [
      "fprintf(${1:stderr}, \"$2\\n\"$0);"
    ],
    "description": "Generic fprintf() snippet",
    "prefix": "fprintf"
  },
  "fscanf": {
    "body": [
      "fscanf($1, \"$2\"$0);"
    ],
    "description": "Generic fscanf() snippet",
    "prefix": "fscanf"
  },
  "if": {
    "body": [
      "if ($1)",
      "{",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for if statement",
    "prefix": "if"
  },
  "lambda_overloader": {
    "body": [
      "// Usage: std::visit(overload{[](const T1& t) {}, ..., [](const Tn& t) {} }, std::variant<T1, ..., Tn>(...));",
      "template <class... Ts>",
      "struct overload : Ts... {",
      "  using Ts::operator()...;",
      "};",
      "template <typename... T>",
      "constexpr auto make_overloader(T&&... t) {",
      "    return Overloader<T...>{std::forward<T>(t)...};",
      "}",
      "template <class... Ts>",
      "overload(Ts...) -> overload<Ts...>;"
    ],
    "description": "Lambda overloader",
    "prefix": "lambda_overloader"
  },
  "namespace": {
    "body": [
      "namespace ${1:MyNamespace}",
      "{",
      "\t$0",
      "}  // namespace ${1:MyNamespace}"
    ],
    "prefix": "namespace"
  },
  "print_types": {
    "body": [
      "template <typename... Ts>",
      "struct [[deprecated]] print_types {}; // print_types<T1, T2, ...>{};"
    ],
    "description": "Print types",
    "prefix": "print_types"
  },
  "printf": {
    "body": [
      "printf(\"$1\\n\"$0);"
    ],
    "description": "Generic printf() snippet",
    "prefix": "printf"
  },
  "ros2_unique_node_name": {
    "body": [
      "// Add random ID to prevent warnings about multiple publishers within the same node",
      "rclcpp::NodeOptions options;",
      "options.arguments({ \"--ros-args\", \"-r\", \"__node:=$NODE_NAME$\" + std::to_string(reinterpret_cast<std::size_t>(this)) });",
      "auto node = rclcpp::Node::make_shared(\"_\", options);"
    ],
    "description": "Unique name for ros2 nodes",
    "prefix": "ros2_unique_node_name"
  },
  "scanf": {
    "body": [
      "scanf(\"$1\"$0);"
    ],
    "description": "Generic scanf() snippet",
    "prefix": "scanf"
  },
  "sprintf": {
    "body": [
      "sprintf($1, \"$2\\n\"$0);"
    ],
    "description": "Generic sprintf() snippet",
    "prefix": "sprintf"
  },
  "sscanf": {
    "body": [
      "sscanf($1, \"$2\"$0);"
    ],
    "description": "Generic sscanf() snippet",
    "prefix": "sscanf"
  },
  "struct": {
    "body": [
      "struct ${1:MyStruct}",
      "{",
      "\t$0",
      "};"
    ],
    "description": "Code snippet for struct",
    "prefix": "struct"
  },
  "switch": {
    "body": [
      "switch (${1:switch_on}) {",
      "\tdefault:",
      "\t\t$0",
      "\t\tbreak;",
      "}"
    ],
    "description": "Code snippet for switch statement",
    "prefix": "switch"
  },
  "time": {
    "body": [
      "auto start = std::chrono::high_resolution_clock::now(); // std::chrono::duration<double>(std::chrono::high_resolution_clock::now() - start).count()"
    ],
    "description": "High resolution time",
    "prefix": "time"
  },
  "try": {
    "body": [
      "try",
      "{",
      "\t",
      "}",
      "catch (const std::exception&)",
      "{",
      "\t$1",
      "}"
    ],
    "description": "Code snippet for try catch",
    "prefix": "try"
  },
  "union": {
    "body": [
      "union ${1:MyUnion}",
      "{",
      "\t$0",
      "};"
    ],
    "description": "Code snippet for union",
    "prefix": "union"
  },
  "verbose_type": {
    "body": [
      "#include <cstdio>",
      "struct verbose_type {",
      "  verbose_type() { puts(\"verbose_type: ctor\"); }",
      "  verbose_type(const verbose_type& /*rhs*/) { puts(\"verbose_type: copy-ctor\"); }",
      "  verbose_type(verbose_type&& /*rhs*/) noexcept { puts(\"verbose_type: move-ctor\"); }",
      "  ~verbose_type() { puts(\"verbose_type: dtor\"); }",
      "  verbose_type& operator=(const verbose_type& /*rhs*/) {",
      "    puts(\"verbose_type: copy-operator\");",
      "    return *this;",
      "  }",
      "  verbose_type& operator=(verbose_type&& /*rhs*/) noexcept {",
      "    puts(\"verbose_type: move-operator\");",
      "    return *this;",
      "  }",
      "};"
    ],
    "description": "Verbose type for debugging",
    "prefix": "verbose_type"
  },
  "while": {
    "body": [
      "while ($1)",
      "{",
      "\t$2",
      "}"
    ],
    "description": "",
    "prefix": "while"
  },
  "scratch": {
    "prefix": "scratch",
    "description": "Cpp scratch file",
    "body": [
      "#include <fmt/core.h>",
      "#include <fmt/ranges.h>",
      "#include <range/v3/all.hpp>",
      "",
      "// https://github.com/fmtlib/fmt/issues/2134",
      "template <typename... T>",
      "\tvoid println(fmt::format_string<T...> fmt, T &&...args) {",
      "\tfmt::print(fmt, std::forward<T>(args)...);",
      "\tstd::fputc('\\n', stdout);",
      "\tfflush(stdout);",
      "}",
      "",
      "int main() {",
      "\t$0",
      "\treturn 0;",
      "}"
    ]
  }
}
