{
  "Err": {
    "body": [
      "Err(${1})"
    ],
    "description": "Err(\u2026)",
    "prefix": "Err"
  },
  "Ok": {
    "body": [
      "Ok(${1:result})"
    ],
    "description": "Ok(\u2026)",
    "prefix": "Ok"
  },
  "Some": {
    "body": [
      "Some(${1})"
    ],
    "description": "Some(\u2026)",
    "prefix": "Some"
  },
  "allow": {
    "body": [
      "#![allow(${1})]"
    ],
    "description": "#![allow(\u2026)]",
    "prefix": "allow"
  },
  "assert": {
    "body": [
      "assert!(${1});"
    ],
    "description": "assert!(\u2026);",
    "prefix": "assert"
  },
  "assert_eq": {
    "body": [
      "assert_eq!(${1}, ${2});"
    ],
    "description": "assert_eq!(\u2026, \u2026);",
    "prefix": "assert_eq"
  },
  "bench": {
    "body": [
      "#[bench]",
      "fn ${1:name}(b: &mut test::Bencher) {",
      "    ${2:b.iter(|| ${3:/* benchmark code */})}",
      "}"
    ],
    "description": "#[bench]",
    "prefix": "bench"
  },
  "cfg": {
    "body": [
      "#[cfg(${1})]"
    ],
    "description": "#[cfg(\u2026)]",
    "prefix": "cfg"
  },
  "cfg!": {
    "body": [
      "cfg!(${1})"
    ],
    "description": "cfg!(\u2026)",
    "prefix": "cfg!"
  },
  "cfg_attr": {
    "body": [
      "#[cfg_attr(${1}, ${2})]"
    ],
    "description": "#[cfg_attr(\u2026, \u2026)]",
    "prefix": "cfg_attr"
  },
  "column": {
    "body": [
      "column!()"
    ],
    "description": "column!()",
    "prefix": "column"
  },
  "concat": {
    "body": [
      "concat!(${1})"
    ],
    "description": "concat!(\u2026)",
    "prefix": "concat"
  },
  "concat_idents": {
    "body": [
      "concat_idents!(${1})"
    ],
    "description": "concat_idents!(\u2026)",
    "prefix": "concat_idents"
  },
  "const": {
    "body": [
      "const ${1:CONST}: ${2:Type} = ${4:init};"
    ],
    "description": "const \u2026: \u2026 = \u2026;",
    "prefix": "const"
  },
  "debug_assert": {
    "body": [
      "debug_assert!(${1});"
    ],
    "description": "debug_assert!(\u2026)",
    "prefix": "debug_assert"
  },
  "debug_assert_eq": {
    "body": [
      "debug_assert_eq!(${1}, ${2});"
    ],
    "description": "debug_assert_eq!(\u2026, \u2026)",
    "prefix": "debug_assert_eq"
  },
  "deny": {
    "body": [
      "#![deny(${1})]"
    ],
    "description": "#![deny(\u2026)]",
    "prefix": "deny"
  },
  "derive": {
    "body": [
      "#[derive(${1})]"
    ],
    "description": "#[derive(\u2026)]",
    "prefix": "derive"
  },
  "else": {
    "body": [
      "else {",
      "    ${1:unimplemented!();}",
      "}"
    ],
    "description": "else { \u2026 }",
    "prefix": "else"
  },
  "enum": {
    "body": [
      "#[derive(Debug)]",
      "enum ${1:Name} {",
      "    ${2:Variant1},",
      "    ${3:Variant2},",
      "}"
    ],
    "description": "enum \u2026 { \u2026 }",
    "prefix": "enum"
  },
  "env": {
    "body": [
      "env!(\"${1}\")"
    ],
    "description": "env!(\"\u2026\")",
    "prefix": "env"
  },
  "extern-crate": {
    "body": [
      "extern create ${1:name};"
    ],
    "description": "extern create \u2026;",
    "prefix": "extern-crate"
  },
  "extern-fn": {
    "body": [
      "extern \"C\" fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:// add code here}",
      "}"
    ],
    "description": "extern \"C\" fn \u2026(\u2026) { \u2026 }",
    "prefix": "extern-fn"
  },
  "extern-mod": {
    "body": [
      "extern \"C\" {",
      "    ${2:// add code here}",
      "}"
    ],
    "description": "extern \"C\" { \u2026 }",
    "prefix": "extern-mod"
  },
  "feature": {
    "body": [
      "#![feature(${1})]"
    ],
    "description": "#![feature(\u2026)]",
    "prefix": "feature"
  },
  "file": {
    "body": [
      "file!()"
    ],
    "description": "file!()",
    "prefix": "file"
  },
  "fn": {
    "body": [
      "fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
      "    ${5:unimplemented!();}",
      "}"
    ],
    "description": "fn \u2026(\u2026) { \u2026 }",
    "prefix": "fn"
  },
  "for": {
    "body": [
      "for ${1:pat} in ${2:expr} {",
      "    ${3:unimplemented!();}",
      "}"
    ],
    "description": "for \u2026 in \u2026 { \u2026 }",
    "prefix": "for"
  },
  "format": {
    "body": [
      "format!(\"${1}\")"
    ],
    "description": "format!(\u2026)",
    "prefix": "format"
  },
  "format_args": {
    "body": [
      "format_args!(\"${1}\")"
    ],
    "description": "format_args!(\u2026)",
    "prefix": "format_args"
  },
  "if": {
    "body": [
      "if ${1:condition} {",
      "    ${2:unimplemented!();}",
      "}"
    ],
    "description": "if \u2026 { \u2026 }",
    "prefix": "if"
  },
  "if-let": {
    "body": [
      "if let ${1:Some(pat)} = ${2:expr} {",
      "    ${0:unimplemented!();}",
      "}"
    ],
    "description": "if let \u2026 = \u2026 { \u2026 }",
    "prefix": "if-let"
  },
  "impl": {
    "body": [
      "impl ${1:Type} {",
      "    ${2:// add code here}",
      "}"
    ],
    "description": "impl \u2026 { \u2026 }",
    "prefix": "impl"
  },
  "impl-trait": {
    "body": [
      "impl ${1:Trait} for ${2:Type} {",
      "    ${3:// add code here}",
      "}"
    ],
    "description": "impl \u2026 for \u2026 { \u2026 }",
    "prefix": "impl-trait"
  },
  "include": {
    "body": [
      "include!(\"${1}\");"
    ],
    "description": "include!(\"\u2026\");",
    "prefix": "include"
  },
  "include_bytes": {
    "body": [
      "include_bytes!(\"${1}\")"
    ],
    "description": "include_bytes!(\"\u2026\")",
    "prefix": "include_bytes"
  },
  "include_str": {
    "body": [
      "include_str!(\"${1}\")"
    ],
    "description": "include_str!(\"\u2026\")",
    "prefix": "include_str"
  },
  "inline-fn": {
    "body": [
      "#[inline]",
      "pub fn ${1:name}() {",
      "    ${2:unimplemented!();}",
      "}"
    ],
    "description": "inlined function",
    "prefix": "inline-fn"
  },
  "let": {
    "body": [
      "let ${1:pat} = ${2:expr};"
    ],
    "description": "let \u2026 = \u2026;",
    "prefix": "let"
  },
  "line": {
    "body": [
      "line!()"
    ],
    "description": "line!()",
    "prefix": "line"
  },
  "loop": {
    "body": [
      "loop {",
      "    ${2:unimplemented!();}",
      "}"
    ],
    "description": "loop { \u2026 }",
    "prefix": "loop"
  },
  "macro_rules": {
    "body": [
      "macro_rules! ${1:name} {",
      "    (${2}) => (${3})",
      "}"
    ],
    "description": "macro_rules! \u2026 { \u2026 }",
    "prefix": "macro_rules"
  },
  "macro_use": {
    "body": [
      "#[macro_use(${1})]"
    ],
    "description": "#[macro_use(\u2026)]",
    "prefix": "macro_use"
  },
  "main": {
    "body": [
      "fn main() {",
      "    ${1:unimplemented!();}",
      "}"
    ],
    "description": "fn main() { \u2026 }",
    "prefix": "main"
  },
  "match": {
    "body": [
      "match ${1:expr} {",
      "    ${2:Some(expr)} => ${3:expr},",
      "    ${4:None} => ${5:expr},",
      "}"
    ],
    "description": "match \u2026 { \u2026 }",
    "prefix": "match"
  },
  "mod": {
    "body": [
      "mod ${1:name};"
    ],
    "description": "mod \u2026;",
    "prefix": "mod"
  },
  "mod-block": {
    "body": [
      "mod ${1:name} {",
      "    ${2:// add code here}",
      "}"
    ],
    "description": "mod \u2026 { \u2026 }",
    "prefix": "mod-block"
  },
  "module_path": {
    "body": [
      "module_path!()"
    ],
    "description": "module_path!()",
    "prefix": "module_path"
  },
  "no_core": {
    "body": [
      "#![no_core]"
    ],
    "description": "#![no_core]",
    "prefix": "no_core"
  },
  "no_std": {
    "body": [
      "#![no_std]"
    ],
    "description": "#![no_std]",
    "prefix": "no_std"
  },
  "option_env": {
    "body": [
      "option_env!(\"${1}\")"
    ],
    "description": "option_env!(\"\u2026\")",
    "prefix": "option_env"
  },
  "panic": {
    "body": [
      "panic!(\"${1}\");"
    ],
    "description": "panic!(\u2026);",
    "prefix": "panic"
  },
  "print": {
    "body": [
      "print!(\"${1}\");"
    ],
    "description": "print!(\u2026);",
    "prefix": "print"
  },
  "println": {
    "body": [
      "println!(\"${1}\");"
    ],
    "description": "println!(\u2026);",
    "prefix": "println"
  },
  "repr": {
    "body": [
      "#[repr(${1})]"
    ],
    "description": "#[repr(\u2026)]",
    "prefix": "repr"
  },
  "static": {
    "body": [
      "static ${1:STATIC}: ${2:Type} = ${4:init};"
    ],
    "description": "static \u2026: \u2026 = \u2026;",
    "prefix": "static"
  },
  "stringify": {
    "body": [
      "stringify!(${1})"
    ],
    "description": "stringify!(\u2026)",
    "prefix": "stringify"
  },
  "struct": {
    "body": [
      "#[derive(Debug)]",
      "struct ${1:Name} {",
      "    ${2:field}: ${3:Type}",
      "}"
    ],
    "description": "struct \u2026 { \u2026 }",
    "prefix": "struct"
  },
  "struct-tuple": {
    "body": [
      "struct ${1:Name}(${2:Type});"
    ],
    "description": "struct \u2026(\u2026);",
    "prefix": "struct-tuple"
  },
  "struct-unit": {
    "body": [
      "struct ${1:Name};"
    ],
    "description": "struct \u2026;",
    "prefix": "struct-unit"
  },
  "test": {
    "body": [
      "#[test]",
      "fn ${1:name}() {",
      "    ${2:unimplemented!();}",
      "}"
    ],
    "description": "#[test]",
    "prefix": "test"
  },
  "thread_local": {
    "body": [
      "thread_local!(static ${1:STATIC}: ${2:Type} = ${4:init});"
    ],
    "description": "thread_local!(static \u2026: \u2026 = \u2026);",
    "prefix": "thread_local"
  },
  "trait": {
    "body": [
      "trait ${1:Name} {",
      "    ${2:// add code here}",
      "}",
      ""
    ],
    "description": "trait \u2026 { \u2026 }",
    "prefix": "trait"
  },
  "try": {
    "body": [
      "try!(${1})"
    ],
    "description": "try!(\u2026)",
    "prefix": "try"
  },
  "type": {
    "body": [
      "type ${1:Alias} = ${2:Type};"
    ],
    "description": "type \u2026 = \u2026;",
    "prefix": "type"
  },
  "unimplemented": {
    "body": [
      "unimplemented!()"
    ],
    "description": "unimplemented!()",
    "prefix": "unimplemented"
  },
  "unreachable": {
    "body": [
      "unreachable!(${1})"
    ],
    "description": "unreachable!(\u2026)",
    "prefix": "unreachable"
  },
  "vec": {
    "body": [
      "vec![${1}]"
    ],
    "description": "vec![\u2026]",
    "prefix": "vec"
  },
  "warn": {
    "body": [
      "#![warn(${1})]"
    ],
    "description": "#![warn(\u2026)]",
    "prefix": "warn"
  },
  "while": {
    "body": [
      "while ${1:condition} {",
      "    ${2:unimplemented!();}",
      "}"
    ],
    "description": "while \u2026 { \u2026 }",
    "prefix": "while"
  },
  "while-let": {
    "body": [
      "while let ${1:Some(pat)} = ${2:expr} {",
      "    ${0:unimplemented!();}",
      "}"
    ],
    "description": "while let \u2026 = \u2026 { \u2026 }",
    "prefix": "while-let"
  },
  "write": {
    "body": [
      "write!(${1}, \"${2}\")"
    ],
    "description": "write!(\u2026)",
    "prefix": "write"
  },
  "writeln": {
    "body": [
      "writeln!(${1}, \"${2}\")"
    ],
    "description": "writeln!(\u2026, \u2026)",
    "prefix": "writeln"
  }
}
