#!/usr/bin/python3

import argparse
import json
import multiprocessing
import os

import argcomplete
from utils import *


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--pkg", nargs="+").completer = PackagesCompleter(
        get_ros_packages(os.path.abspath(os.curdir) + "/src")
    )
    parser.add_argument("--skip", nargs="+").completer = PackagesCompleter(
        get_ros_packages(os.path.abspath(os.curdir) + "/src")
    )
    # Configuring neovim-cmake
    packages = get_ros_packages_path(os.path.abspath(os.curdir) + "/src")
    build_path = Path(os.path.abspath(os.curdir)) / "build"
    for package, path in packages:
        create_clangd_config(
            str((build_path / f"{package}").absolute()),
            Path(path),
        )

    # Configuring clangd
    parser.add_argument("--build-tests", action="store_true", help="")
    parser.add_argument("--dry-run", action="store_true", help="")
    parser.add_argument(
        "--build-type",
        default="release",
        const="release",
        nargs="?",
        choices=["debug", "min-size-rel", "release", "rel-with-deb-info"],
    )
    parser.add_argument(
        "--force-linking",
        action="store_true",
        help="Force linker to solve references at linking stage (Force GCC to notify about undefined references in shared libraries)",
    )
    parser.add_argument(
        "--jobs", type=int, choices=range(1, multiprocessing.cpu_count() + 1)
    )
    parser.add_argument("--verbose", action="store_true", help="")

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    cmd = []
    env = os.environ.copy()
    # TODO: Add check for ubuntu version and set mold the default linker >= 22.04 with clang???
    # float(lsb_release.get_distro_information()['RELEASE']) >= 22.04
    cmd += ["colcon", "build", "--symlink-install"]
    if args.pkg:
        cmd += ["--packages-select"]
        cmd += args.pkg
    if args.skip:
        cmd += ["--packages-skip"]
        cmd += args.skip
    if args.jobs:
        env["MAKEFLAGS"] = f"-j{args.jobs}"
        cmd.append(f"--parallel-workers={args.jobs}")
    cmd += [
        "--mixin",
        args.build_type,
        "compile-commands",
        "build-testing-" + ("on" if args.build_tests else "off"),
        "ninja",
        "lld",
    ]
    if args.verbose:
        cmd += ["--event-handlers", "console_direct+"]
    if args.force_linking:
        cmd += ["--cmake-args", f'-DCMAKE_CXX_FLAGS="-Wl,--no-undefined"']
    run_command(cmd, args.dry_run, env=env)


if __name__ == "__main__":
    main()
