#!/usr/bin/python3

import argparse
import json
import os
import re

import argcomplete
from utils import (
    PackagesCompleter,
    RosVersions,
    call,
    get_package_paths,
    get_ros_packages,
    get_ros_version,
    run_command,
)

PATTERN = re.compile(r"\d* tests collected in \d*.\d*s")


def get_tests(package_name):
    tests = []
    src_dir, build_dir = get_package_paths(package_name)
    parsed_output = json.loads(
        call(
            [
                "ctest",
                "--show-only=json-v1",
                "--test-dir",
                build_dir,
            ]
        )
    )
    for test in parsed_output["tests"]:
        tests.append(test["name"] + "@ctest")

    return tests


class TestCompleter:
    def __call__(self, prefix, parsed_args, **kwargs):
        return get_tests(parsed_args.pkg[0])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--pkg", nargs="+").completer = PackagesCompleter(
        get_ros_packages(os.path.abspath(os.curdir) + "/src")
    )
    # nargs??? for ctest it's -L??
    parser.add_argument("--test").completer = TestCompleter()
    parser.add_argument("--verbose", action="store_true", help="")
    parser.add_argument("--dry-run", action="store_true", help="")
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    cmd = []
    ros_version = get_ros_version()
    if ros_version == RosVersions.UNKNOWN:
        print("Unknown ROS version")
        return
    if ros_version == RosVersions.ROS1:
        cmd += ["catkin", "build"]
        if args.pkg:
            cmd += args.pkg
            cmd += ["--no-deps"]
        if args.verbose:
            cmd += ["--verbose"]
        cmd += ["--catkin-make-args", "run_tests"]
    elif ros_version == RosVersions.ROS2:
        cmd += ["colcon", "test"]
        if args.pkg:
            cmd += ["--packages-select"]
            cmd += args.pkg
        if args.verbose:
            cmd += ["--event-handlers", "console_direct+"]
        if args.test:
            test, test_type = args.test.split("@")
            if test_type == "pytest":
                cmd += ["--pytest-args", test]
            elif test_type == "ctest":
                cmd += ["--ctest-args", "--tests-regex", test]
    run_command(cmd, args.dry_run)


if __name__ == "__main__":
    main()
