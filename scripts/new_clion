#!/usr/bin/python3

import os
from pathlib import Path
from glob import glob
import subprocess

home_dir = Path(os.getenv("HOME"))
CLION_CONFIG_PATH = home_dir / ".config"
CLION_CONFIG_DIR_PREFIX = "clion_configs"
PORT_FILE_PATH = Path("config") / "port"
DEFAULT_CLION_CONFIGS_PATH = CLION_CONFIG_PATH / CLION_CONFIG_DIR_PREFIX
VMOPTIONS = """
-Didea.config.path={config_dir}/config
-Didea.system.path={config_dir}/system
-Didea.plugins.path={config_dir}/config/plugins
-Didea.log.path={config_dir}/system/log
"""


def get_clion_configs_number(clion_configs_path: str):
    clion_configs_number = Path(clion_configs_path).name.partition(
        CLION_CONFIG_DIR_PREFIX
    )[2]
    return 0 if len(clion_configs_number) == 0 else int(clion_configs_number)


def main():
    clion_configs = glob(
        str(CLION_CONFIG_PATH.absolute()) + "/" + CLION_CONFIG_DIR_PREFIX + "*"
    )
    clion_configs.sort()
    clion_configs_closed = []
    for clion_config in clion_configs:
        if (Path(clion_config) / PORT_FILE_PATH).exists():
            print(clion_config + " is running")
        else:
            clion_configs_closed.append(get_clion_configs_number(clion_config))
    clion_configs_number = ""
    if len(clion_configs_closed) == 0:
        clion_configs_number = str(get_clion_configs_number(clion_configs[-1]) + 1)
    else:
        if clion_configs_closed[0] != 0:
            clion_configs_number = str(clion_configs_closed[0])
    clion_configs_path = CLION_CONFIG_PATH / (
        CLION_CONFIG_DIR_PREFIX + clion_configs_number
    )
    clion_vmoptions_path = CLION_CONFIG_PATH / (
        "clion" + clion_configs_number + ".vmoptions"
    )
    print("Using {} with {}".format(clion_configs_path, clion_vmoptions_path))
    if not clion_vmoptions_path.exists():
        with open(clion_vmoptions_path, "w") as f:
            f.write(VMOPTIONS.format(config_dir=clion_configs_path.absolute()))
    env = os.environ.copy()
    env["CLION_VM_OPTIONS"] = str(clion_vmoptions_path.absolute())
    if not clion_configs_path.exists():
        config_files = subprocess.check_output(
            "git ls-files", cwd=DEFAULT_CLION_CONFIGS_PATH, shell=True
        ).splitlines()
        config_files = [config_file.decode("utf-8") for config_file in config_files]
        os.mkdir(clion_configs_path)
        for config_file in config_files:
            if config_file == ".gitignore":
                continue
            config_dir = clion_configs_path / "/".join(config_file.split("/")[:-1])
            if not config_dir.exists():
                Path(clion_configs_path / config_dir).mkdir(parents=True)
            os.symlink(
                DEFAULT_CLION_CONFIGS_PATH / config_file,
                clion_configs_path / config_file,
            )
    subprocess.call("clion", env=env)


if __name__ == "__main__":
    main()
