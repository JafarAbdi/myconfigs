#!/usr/bin/python3
"""A script to run clang-tidy on a ROS package."""


import argparse
import logging
import os
import pathlib

import argcomplete
from utils import (
    RosVersions,
    get_ros_package_path,
    get_ros_packages,
    get_ros_version,
    run_command,
)

logger = logging.getLogger(__name__)


def main() -> None:
    """Main function."""
    if (ros_distro := os.environ.get("ROS_DISTRO")) is None:
        logger.error("ROS_DISTRO is not set")
        return
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--pkg",
        choices=get_ros_packages(pathlib.Path(os.curdir).resolve() / "src"),
    )
    parser.add_argument("--dry-run", action="store_true", help="")
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    package_build_path = (
        pathlib.Path() / f"build_{ros_distro}/{args.pkg}"
    ).resolve()
    package_path = get_ros_package_path(pathlib.Path(os.curdir) / "src", args.pkg)
    if not pathlib.Path(package_path).exists():
        logger.error(f"Package '{args.pkg}' doesn't exists")
        return

    cmd = []
    ros_version = get_ros_version()
    if ros_version == RosVersions.UNKNOWN:
        ros_version = input("Unknown version -- Select ros version (1/2):")
        try:
            ros_version = RosVersions(int(ros_version))
        except ValueError:
            logger.exception("Unknown ROS version")
            return
    if ros_version == RosVersions.ROS1:
        cmd += ["catkin", "build"]
        if args.pkg:
            cmd += [args.pkg]
            cmd += ["--no-deps"]
        cmd += [
            "--cmake-args",
            "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
        ]
    elif ros_version == RosVersions.ROS2:
        cmd += ["colcon", "build", "--symlink-install"]
        if args.pkg:
            cmd += ["--packages-select"]
            cmd += [args.pkg]
        cmd += [
            "--cmake-args",
            "-DBUILD_TESTING=OFF",
            "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
        ]
    run_command(cmd, args.dry_run)
    clang_tidy_cmd = [
        "run-clang-tidy",
        "-fix",
        f"-header-filter={package_path}/.*",
        f"-p={package_build_path}",
        ".",
    ]
    run_command(clang_tidy_cmd, args.dry_run, package_path)


if __name__ == "__main__":
    main()
