#!/usr/bin/python3

import argparse
import multiprocessing
import os
from pathlib import Path

import argcomplete
from utils import (
    PackagesCompleter,
    RosVersions,
    create_vscode_config,
    get_ros_packages,
    get_ros_packages_path,
    get_ros_version,
    run_command,
)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--pkg", nargs="+").completer = PackagesCompleter(
        get_ros_packages(Path(os.curdir).resolve() / "src"),
    )
    parser.add_argument("--skip", nargs="+").completer = PackagesCompleter(
        get_ros_packages(Path(os.curdir).resolve() / "src"),
    )
    # Configuring neovim-cmake
    workspace_dir = Path(os.curdir).resolve()
    src_dir = workspace_dir / "src"
    if not Path(src_dir).exists():
        print(f"{workspace_dir} is not a workspace directory")
        return
    clangd_path = Path(workspace_dir) / ".clangd"
    if not clangd_path.exists():
        with clangd_path.open("w", encoding="utf-8") as file:
            file.write("CompileFlags:\n\tAdd: [-std=c++17]")
    packages = get_ros_packages_path(src_dir)
    build_path = Path(workspace_dir) / "build"
    for package, path in packages:
        create_vscode_config(
            str((build_path / f"{package}").absolute()),
            Path(path),
        )

    # Configuring clangd
    parser.add_argument("--build-tests", action="store_true", help="")
    parser.add_argument("--dry-run", action="store_true", help="")
    parser.add_argument(
        "--build-type",
        default="release",
        const="release",
        nargs="?",
        choices=["debug", "min-size-rel", "release", "rel-with-deb-info"],
    )
    parser.add_argument(
        "--force-linking",
        action="store_true",
        help="Force linker to solve references at linking stage (Force GCC to notify about undefined references in shared libraries)",
    )
    parser.add_argument(
        "--jobs",
        type=int,
        choices=range(1, multiprocessing.cpu_count() + 1),
    )
    parser.add_argument("--verbose", action="store_true", help="")

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    cmd = []
    env = os.environ.copy()
    ros_version = get_ros_version()
    # colcon works with ROS1???
    if ros_version == RosVersions.UNKNOWN:
        ros_version = input("Unknown version -- Select ros version (1/2):")
        try:
            ros_version = RosVersions(int(ros_version))
        except ValueError:
            print("Unknown ROS version")
            return
    if ros_version == RosVersions.ROS1:
        cmd += ["catkin", "build"]
        if args.pkg:
            cmd += args.pkg
            cmd += ["--no-deps"]
        # TODO: Add skipping a package for catkin
        if args.skip:
            errmsg = "Skipping a package isn't supported yet for catkin"
            raise RuntimeError(errmsg)
        if args.jobs:
            errmsg = "Specifying the number of jobs isn't supported yet for catkin"
            raise RuntimeError(errmsg)
        cmd += [
            "--cmake-args",
            f"-DCMAKE_BUILD_TYPE={args.build_type}",
            "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
        ]
        if args.force_linking:
            cmd += ['-DCMAKE_CXX_FLAGS="-Wl,--no-undefined"']
        cmd += ["-DCATKIN_ENABLE_TESTING=" + ("ON" if args.build_tests else "OFF")]

    elif ros_version == RosVersions.ROS2:
        cmd += ["colcon", "build", "--symlink-install"]
        if args.pkg:
            cmd += ["--packages-select"]
            cmd += args.pkg
        if args.skip:
            cmd += ["--packages-skip"]
            cmd += args.skip
        if args.jobs:
            env["MAKEFLAGS"] = f"-j{args.jobs}"
            cmd.append(f"--parallel-workers={args.jobs}")
        cmd += [
            "--mixin",
            args.build_type,
            "compile-commands",
            "build-testing-" + ("on" if args.build_tests else "off"),
            "ninja",
            "lld",
        ]
        if args.verbose:
            cmd += ["--event-handlers", "console_direct+"]
        if args.force_linking:
            cmd += ["--cmake-args", '-DCMAKE_CXX_FLAGS="-Wl,--no-undefined"']
    run_command(cmd, args.dry_run, env=env)


if __name__ == "__main__":
    main()
