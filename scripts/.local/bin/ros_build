#!/usr/bin/env python
"""A script to have a common interface for building ROS packages using colcon/catkin."""

import argparse

# Setup logger
import logging
import multiprocessing
import os
from pathlib import Path

import argcomplete
from utils import (
    create_clangd_config_ros,
    create_cmake_query_files,
    create_vscode_config,
    get_colcon_postfix,
    get_ros_packages,
    get_ros_packages_path,
    run_command,
)

logger = logging.getLogger(__name__)


def main() -> None:
    """Main function."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--pkg",
        nargs="+",
        choices=get_ros_packages(Path(os.curdir).resolve() / "src"),
    )
    parser.add_argument(
        "--skip",
        nargs="+",
        choices=get_ros_packages(Path(os.curdir).resolve() / "src"),
    )
    workspace_dir = Path(os.curdir).resolve()
    src_dir = workspace_dir / "src"
    if not Path(src_dir).exists():
        logger.error(f"{workspace_dir} is not a workspace directory")
        return

    postfix = get_colcon_postfix(workspace_dir)
    packages = get_ros_packages_path(src_dir)
    build_path = Path(workspace_dir) / f"build{postfix}"
    create_clangd_config_ros(workspace_dir, build_path)
    for package, path in packages:
        create_cmake_query_files(build_path / f"{package}")
        create_vscode_config(
            str((build_path / f"{package}").absolute()),
            Path(path),
        )

    # Configuring clangd
    parser.add_argument("--build-tests", action="store_true", help="")
    parser.add_argument("--dry-run", action="store_true", help="")
    parser.add_argument(
        "--build-type",
        default="rel-with-deb-info",
        const="rel-with-deb-info",
        nargs="?",
        choices=["debug", "min-size-rel", "release", "rel-with-deb-info"],
    )
    parser.add_argument(
        "--force-linking",
        action="store_true",
        help="Force linker to solve references at linking stage (Force GCC to notify about undefined references in shared libraries)",
    )
    parser.add_argument(
        "--jobs",
        type=int,
        choices=range(1, multiprocessing.cpu_count() + 1),
    )
    parser.add_argument("--verbose", action="store_true", help="")

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    env = os.environ.copy()
    cmd = [
        "colcon",
        "build",
        "--symlink-install",
        "--build-base",
        f"build{postfix}",
        "--install-base",
        f"install{postfix}",
    ]
    if args.pkg:
        cmd += ["--packages-select"]
        cmd += args.pkg
    if args.skip:
        cmd += ["--packages-skip"]
        cmd += args.skip
    if args.jobs:
        env["MAKEFLAGS"] = f"-j{args.jobs}"
        cmd.append(f"--parallel-workers={args.jobs}")
    cmd += [
        "--mixin",
        args.build_type,
        "compile-commands",
        "build-testing-" + ("on" if args.build_tests else "off"),
        "ninja",
        "lld",
    ]
    if args.verbose:
        cmd += ["--event-handlers", "console_direct+"]
    if args.force_linking:
        cmd += ["--cmake-args", '-DCMAKE_CXX_FLAGS="-Wl,--no-undefined"']
    run_command(cmd, args.dry_run, env=env)


if __name__ == "__main__":
    main()
