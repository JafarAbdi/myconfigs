#!/usr/bin/env bash

set -euo pipefail

WORKSPACE_DIR="$HOME/workspace"
CPP_SCREATCHES_DIR="$WORKSPACE_DIR/cpp/scratches"

readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

extract() {
  atool -qx "$1"
}

error() {
    echo -e "${RED}Error: ${1}${NC}" >&2
    exit 1
}

warning() {
    echo -e "${YELLOW}Warning: ${1}${NC}" >&2
}

info() {
    echo -e "${GREEN}${1}${NC}"
}

install_package() {
    if command -v sudo >/dev/null 2>&1; then
        sudo apt-get install -y "$@"
    else
        warning "sudo is not available. Attempting to run apt-get without sudo."
        apt-get install -y "$@"
    fi
}

install_from_github() {
    if [ $# -ne 2 ]; then
        echo "install-from-github requires 2 inputs USER/REPO regex" >&2
        return 1
    fi
    curl -s "https://api.github.com/repos/$1/releases" \
      | grep -E "https://github.com/$1/releases/download.*$2" \
      | cut -d':' -f 2,3 \
      | tr -d \" \
      | head -n 1 \
      | wget -i -
}

list_options() {
    echo "Available options:"
    grep -E '^[[:space:]]+[a-zA-Z0-9_-]+\)' "$0" | sed 's/)//' | tr -d ' \t' | sort
}

case "${1:-}" in
    core)
        install_package --no-install-recommends \
            python3-venv \
            fswatch \
            stow \
            software-properties-common \
            python-is-python3 \
            git \
            git-core \
            git-lfs \
            ssh \
            unzip \
            colordiff \
            tree \
            less \
            lsb-release \
            iputils-ping \
            htop \
            python3-pip \
            python3-argcomplete \
            fuse3 \
            libfuse2 \
            p7zip-full \
            zip \
            wget \
            bat \
            curl \
            file \
            lld \
            lldb \
            ninja-build \
            sshfs \
            universal-ctags \
            pdfgrep \
            atool \
            ccache
        mkdir -p ~/.local/bin || true
        $0 ripgrep
        $0 fzf
        $0 libtree
        $0 fd
        $0 repgrep
        $0 pixi
        $0 uv
        $0 nvim nightly
        $0 mold
        $0 difftastic
        ;;

    nextcloud-sync)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github nextcloud-releases/desktop "Nextcloud.*x86_64.AppImage"
        chmod +x Nextcloud*.AppImage
        mv Nextcloud*.AppImage ~/.local/bin/nextcloud
        popd || exit 1
        ;;

    obsidian)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github obsidianmd/obsidian-releases "Obsidian-[0-9]{1,}.[0-9]{1,}.[0-9]{1,}.AppImage"
        chmod +x Obsidian-*.AppImage
        mv Obsidian-*.AppImage ~/.local/bin/obsidian
        popd || exit 1
        ;;

    i3)
        if [ "$(lsb_release -is)" = "Ubuntu" ]; then
            TMP_DIR=$(mktemp -d -p /tmp i3-XXXXXX)
            pushd "$TMP_DIR" || exit 1
            /usr/lib/apt/apt-helper download-file https://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2024.03.04_all.deb keyring.deb SHA256:f9bb4340b5ce0ded29b7e014ee9ce788006e9bbfe31e96c09b2118ab91fca734
            sudo apt install ./keyring.deb
            echo "deb http://debian.sur5r.net/i3/ $(grep '^DISTRIB_CODENAME=' /etc/lsb-release | cut -f2 -d=) universe" | sudo tee /etc/apt/sources.list.d/sur5r-i3.list
            sudo apt update
            popd || exit 1
        fi
        sudo apt install -y i3
        ;;

    docker-compose)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github docker/compose docker-compose-linux-x86_64
        chmod +x docker-compose-linux-x86_64
        mv docker-compose-linux-x86_64 ~/.local/bin/docker-compose
        popd || exit 1
        ;;

    docker)
        if ! command -v docker &> /dev/null; then
            sudo apt install -y curl
            curl -sSL https://get.docker.com/ | sh
            sudo usermod -aG docker "$(whoami)"
        fi
        $0 docker-compose
        sudo docker run hello-world
        # Nvidia
        # It uses the latest stable version, there's release for sid
        # https://docs.docker.com/engine/install/debian/
        # https://nickjanetakis.com/blog/docker-tip-77-installing-docker-on-debian-unstable
        echo "To install nvidia-docker follow: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html#installation"
        sudo systemctl restart docker
        wget https://raw.githubusercontent.com/docker/cli/master/contrib/completion/bash/docker -O ~/.bash_completion.d/docker
        wget https://raw.githubusercontent.com/docker/compose/master/contrib/completion/bash/docker-compose -O ~/.bash_completion.d/docker-compose
        ;;

    ripgrep)
        if [ "$(lsb_release -sr)" = "unstable" ]; then
            sudo apt install -y ripgrep
        else
            TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
            pushd "$TMP_DIR" || exit 1
            install_from_github "BurntSushi/ripgrep" "ripgrep.*-x86_64-unknown-linux-musl.tar.gz"
            tar -xzf ripgrep* --strip-components=1
            mv rg ~/.local/bin
            if command -v fish >/dev/null 2>&1; then
              mv complete/rg.fish ~/.config/fish/completions
            fi
            popd || exit 1
        fi
        ;;

    fzf)
        if [ "$(lsb_release -sr)" = "unstable" ]; then
            sudo apt install -y fzf
        else
            # https://raw.githubusercontent.com/junegunn/fzf/master/install
            FZF_TMP_DIR=$(mktemp -d -p /tmp fzf-XXXXXX)
            pushd "$FZF_TMP_DIR" || exit 1
            curl -s https://api.github.com/repos/junegunn/fzf/releases \
            | grep "https://github.com/junegunn/fzf/releases/download.*-linux_amd64.tar.gz" \
            | cut -d':' -f 2,3 \
            | tr -d \" \
            | head -n 1 \
            | wget -i -
            extract fzf-*

            mv fzf ~/.local/bin/
            popd || exit 1
        fi
        ;;

    libtree)
        if [ "$(lsb_release -sr)" = "unstable" ]; then
            sudo apt install -y libtree
        else
            rm ~/.local/bin/libtree 2> /dev/null || true
            curl -s https://api.github.com/repos/haampie/libtree/releases \
              | grep "https://github.com/haampie/libtree/releases/download.*libtree_x86_64" \
              | grep -v ".tar.gz" \
              | cut -d':' -f 2,3 \
              | tr -d \" \
              | head -n 1 \
              | wget -O ~/.local/bin/libtree -i -
            chmod +x ~/.local/bin/libtree
        fi
        ;;

    fd)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github sharkdp/fd "fd.*x86_64-unknown-linux-gnu.tar.gz"
        tar -xzf fd* --strip-components=1

        mv fd ~/.local/bin
        if command -v fish >/dev/null 2>&1; then
          mv autocomplete/fd.fish ~/.config/fish/completions
        fi
        popd || exit 1
        ;;

    repgrep)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        if [ "$(uname -s)" = "Darwin" ]; then
            os="apple-darwin"
        else
            os="unknown-linux-gnu"
        fi
        install_from_github acheronfail/repgrep "repgrep.*$os.tar.gz"
        tar -xzf repgrep* --strip-components=1
        mv rgr ~/.local/bin
        if command -v fish >/dev/null 2>&1; then
          mv complete/rgr.fish ~/.config/fish/completions/
        fi
        popd || exit 1
        ;;

    efm-lsp)
        if [ "$(lsb_release -sr)" = "unstable" ]; then
            sudo apt install -y efm-langserver
        else
            TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
            pushd "$TMP_DIR" || exit 1
            install_from_github mattn/efm-langserver "efm-langserver_.*_linux_amd64.tar.gz"
            tar xzf efm-langserver* --strip-components 1
            mv efm-langserver ~/.local/bin
            popd || exit 1
        fi
        ;;

    lua-lsp)
        mkdir -p ~/.config/lua-lsp
        rm -rf ~/.config/lua-lsp/* 2> /dev/null
        pushd ~/.config/lua-lsp || exit 1
        os="linux-x64"
        if [ "$(uname -s)" = "Darwin" ]; then
            os="darwin-arm64"
        fi
        curl -s https://api.github.com/repos/LuaLS/lua-language-server/releases \
            | grep "browser_download_url" \
            | grep "$os.tar.gz" \
            | cut -d":" -f 2,3 \
            | tr -d \" \
            | head -n 1 \
            | wget -i -
        tar xzf lua-language-server-*
        popd || exit 1
        ;;

    taplo)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github tamasfe/taplo taplo-full-linux-x86_64.gz
        extract taplo-full-linux-x86_64.gz
        chmod +x taplo-full-linux-x86_64
        mv taplo-full-linux-x86_64 ~/.local/bin/taplo
        popd || exit 1
        ;;

    luacheck)
        if [ "$(uname -s)" = "Darwin" ]; then
            brew install luarocks
        else
            install_package luarocks
        fi
        luarocks install luacheck --local
        ;;

    markdown-lsp)
        install_from_github artempyanykh/marksman marksman-linux-x64
        chmod +x marksman-linux-x64
        mv marksman-linux-x64 ~/.local/bin/marksman
        ;;

    hadolint)
        wget https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 -O ~/.local/bin/hadolint
        chmod +x ~/.local/bin/hadolint
        ;;

    linters)
        $0 taplo
        $0 luacheck
        $0 hadolint
        $0 actionlint
        $0 stylua
        ;;

    lsps)
        $0 efm-lsp
        $0 lua-lsp
        $0 markdown-lsp
        $0 xml-lsp
        $0 cpp-lsp
        ;;

    wezterm)
        if [ "$(uname -s)" = "Darwin" ]; then
            brew install --cask wezterm@nightly
        else
            wget https://github.com/wez/wezterm/releases/download/nightly/WezTerm-nightly-Ubuntu20.04.AppImage -O ~/.local/bin/wezterm
            chmod +x ~/.local/bin/wezterm
            wezterm shell-completion --shell fish > ~/.config/fish/completions/wezterm.fish
            # Install terminfo
            tempfile=$(mktemp)
            curl -o "$tempfile" https://raw.githubusercontent.com/wez/wezterm/master/termwiz/data/wezterm.terminfo
            tic -x -o ~/.terminfo "$tempfile"
            rm "$tempfile"
        fi
        ;;

    actionlint)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github rhysd/actionlint "actionlint_.*_linux_amd64.tar.gz"
        extract actionlint*
        mv actionlint_*_linux_amd64/actionlint ~/.local/bin/
        popd || exit 1
        ;;

    stylua)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        if [ "$(uname -s)" = "Darwin" ]; then
            install_from_github "JohnnyMorganz/StyLua" "stylua-macos.zip"
        else
            install_from_github "JohnnyMorganz/StyLua" "stylua-linux.zip"
        fi
        unzip stylua*
        mv stylua ~/.local/bin
        popd || exit 1
        ;;

    xml-lsp)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github redhat-developer/vscode-xml lemminx-linux.zip
        unzip lemminx-linux.zip
        mv lemminx-linux ~/.local/bin/lemminx
        popd || exit 1
        ;;

    cpp-lsp)
        os="linux"
        if [[ "$(uname -s)" == "Darwin" ]]; then
            os="mac"
        else
            install_package --no-install-recommends \
                clang-tools clang-tidy clang gcc cmake dwarves bear
        fi
        tmp_dir=$(mktemp -d -p /tmp clangd-XXXXXX)
        pushd "$tmp_dir"
        install_from_github "clangd/clangd" "clangd-$os-19.1.2.zip"
        unzip -q clangd-*.zip
        rm -rf ~/.config/clangd-lsp
        mv clangd_* ~/.config/clangd-lsp
        mkdir -p ~/.config/clangd
        popd
        ;;

    rust)
        if ! command -v rustup &> /dev/null; then
            curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh
            source "$HOME/.cargo/env"
            rustup component add rust-analyzer
        else
            rustup update
        fi
        ;;

    nvim)
        if [[ "$(uname -s)" == "Darwin" ]]; then
            cd
            rm -rf nvim-macos-arm64.tar.gz || true
            wget https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-arm64.tar.gz
            xattr -c ./nvim-macos-arm64.tar.gz
            tar xzvf nvim-macos-arm64.tar.gz
        else
            if [[ "${2:-}" == "nightly" ]]; then
                wget https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage -O ~/.local/bin/nvim
            else
                wget https://github.com/neovim/neovim/releases/latest/download/nvim.appimage -O ~/.local/bin/nvim
            fi
            chmod +x ~/.local/bin/nvim
        fi
        ;;

    gcloud)
        export GCSFUSE_REPO="gcsfuse-$(lsb_release -c -s)"
        echo "deb https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        echo "deb https://packages.cloud.google.com/apt $GCSFUSE_REPO main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        sudo apt-get update && sudo apt-get install google-cloud-cli fuse gcsfuse
        gcloud init
        gcloud auth application-default login
        ;;

    rattler-build)
        wget https://github.com/prefix-dev/rattler-build/releases/latest/download/rattler-build-x86_64-unknown-linux-musl -O ~/.local/bin/rattler-build
        chmod +x ~/.local/bin/rattler-build
        rattler-build completion --shell=fish > ~/.config/fish/completions/rattler-build.fish
        ;;

    uv)
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo 'uv generate-shell-completion fish | source' >> ~/.config/fish/config.fish
        echo 'uvx --generate-shell-completion fish | source' >> ~/.config/fish/config.fish
        ;;

    pixi)
        wget https://github.com/prefix-dev/pixi/releases/latest/download/pixi-x86_64-unknown-linux-musl -O ~/.local/bin/pixi
        chmod +x ~/.local/bin/pixi
        if command -v fish >/dev/null 2>&1; then
          pixi completion --shell fish > ~/.config/fish/completions/pixi.fish
        fi
        ;;

    zig)
        rm -rf ~/.config/zig && mkdir -p ~/.config/zig
        wget $(curl https://ziglang.org/download/index.json | jq -r '.["master"]["x86_64-linux"]["tarball"]') -O zig.tar.xz
        tar xvf zig.tar.xz --strip-components 1 -C ~/.config/zig
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github zigtools/zls zls-x86_64-linux.tar.xz
        tar xf zls-x86_64-linux.tar.xz
        mv zls ~/.local/bin/zls
        popd || exit 1
        ;;

    gh)
        if [ "$(uname -s)" = "Darwin" ]; then
            brew install gh
        else
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            install_package gh
        fi
        gh auth login
        gh extension install github/gh-copilot
        gh config set git_protocol ssh
        ;;

    mold)
        if [ "$(lsb_release -sr)" = "unstable" ]; then
            install_package mold
        else
            TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
            pushd "$TMP_DIR" || exit 1
            install_from_github rui314/mold "mold-.*-x86_64-linux.tar.gz"
            tar -vxzf mold* -C ~/.local --strip-components=1
            popd || exit 1
        fi
        ;;

    difftastic)
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github Wilfred/difftastic difft-x86_64-unknown-linux-gnu.tar.gz
        extract difft-x86_64-unknown-linux-gnu.tar.gz
        mv difft ~/.local/bin
        popd || exit 1
        ;;

    clang-build-analyzer)
        pushd ~/.local/bin
        install_from_github aras-p/ClangBuildAnalyzer ClangBuildAnalyzer-linux
        mv ClangBuildAnalyzer-linux ClangBuildAnalyzer
        chmod +x ClangBuildAnalyzer
        popd || exit 1
        ;;

    install_from_github)
        if [ $# -ne 3 ]; then
            error "install-from-github requires 2 inputs USER/REPO regex"
        fi
        install_from_github "$2" "$3"
        ;;

    setup_fish)
        if [ "$(id -u)" -eq 0 ]; then
          info "Installing packages without sudo..."
          apt update
          apt install -y software-properties-common curl wget && apt-add-repository -y ppa:fish-shell/release-3
          apt install -y fish
        else
          info "Installing packages with sudo..."
          sudo apt update
          sudo apt install -y software-properties-common curl wget && sudo apt-add-repository -y ppa:fish-shell/release-3
          sudo apt install -y fish
        fi

        rm -rf ~/.config/fish || true
        mkdir -p ~/.config/fish

        echo "source ~/myconfigs/fish/config.fish" > ~/.config/fish/config.fish

        # To be able to source bash scripts
        fish -c "curl -sL https://git.io/fisher | source && fisher install edc/bass"

        # Skip setting fish as the default shell if we are in a docker or podman containers
        if [ ! -e /.dockerenv ] && [ -z "$PODMAN_NAME" ]; then
            chsh -s /usr/bin/fish
        fi
        ;;

    unstow)
        pushd ~/myconfigs || exit 1
        stow --target ~ --ignore=.mypy_cache --ignore=.ruff_cache --delete cargo \
                                                                           clangd \
                                                                           i3 \
                                                                           git \
                                                                           neovim \
                                                                           ruff \
                                                                           scripts \
                                                                           stylua \
                                                                           tmux \
                                                                           fd \
                                                                           ripgrep \
                                                                           wezterm \
                                                                           yamllint \
                                                                           zathura
        popd || exit 1
        ;;

    stow)
        pushd ~/myconfigs || exit 1
        stow --no-folding --target ~ --ignore=.mypy_cache --ignore=.ruff_cache --stow cargo \
                                                                                      clangd \
                                                                                      git \
                                                                                      ruff \
                                                                                      scripts \
                                                                                      stylua \
                                                                                      fd \
                                                                                      ripgrep \
                                                                                      yamllint \
                                                                                      zathura
        stow --target ~ --ignore=.mypy_cache --ignore=.ruff_cache --stow i3 \
                                                                         wezterm \
                                                                         neovim \
                                                                         tmux
        popd || exit 1
        ;;

    urdf_viz)
        install_package rospack-tools
        TMP_DIR=$(mktemp -d -p /tmp install-XXXXXX)
        pushd "$TMP_DIR" || exit 1
        install_from_github openrr/urdf-viz urdf-viz-x86_64-unknown-linux-gnu.tar.gz
        extract urdf-viz-x86_64-unknown-linux-gnu.tar.gz
        mv urdf-viz ~/.local/bin
        popd || exit 1
        ;;

    colcon)
        install_package 'python3-colcon-*' python3-vcstool python3-rosdep
        colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml
        colcon mixin update default
        sudo rosdep init
        rosdep update
        ;;

    *)
        info "Usage: $(basename "$0") <option>" >&2
        list_options
        exit 1
        ;;
esac
